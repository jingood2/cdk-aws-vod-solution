"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextVariables = void 0;
const cdk = require("@aws-cdk/core");
const convertToBool = (value) => {
    if (value === undefined || !value) {
        return null;
    }
    switch (value) {
        case true:
        case 'true':
        case 1:
        case '1':
        case 'on':
        case 'yes':
            return true;
        default:
            return false;
    }
};
class ContextVariables extends cdk.Construct {
    constructor(scope, id, props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        super(scope, id);
        this.acceleratedTranscoding = (_a = this.node.tryGetContext('acceleratedTranscoding')) !== null && _a !== void 0 ? _a : 'PREFERRED';
        if (this.acceleratedTranscoding === undefined) {
            throw new Error(`The 'acceleratedTranscoding' context variable is required.`);
        }
        if (this.acceleratedTranscoding &&
            !['DISABLED', 'ENABLED', 'PREFERRED'].includes(this.acceleratedTranscoding)) {
            throw new Error(`The 'acceleratedTranscoding' context variable must be one of 'DISABLED', 'ENABLED', or 'PREFERRED'; found value was '${this.acceleratedTranscoding}'.`);
        }
        this.adminEmail = this.node.tryGetContext('adminEmail');
        if (this.adminEmail === undefined) {
            throw new Error(`The 'adminEmail' context variable is required.`);
        }
        const adminEmailValidation = this.adminEmail.match(/^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$/g);
        if (adminEmailValidation && adminEmailValidation.length !== 1) {
            throw new Error(`The 'adminEmail' context variable must be a valid email address and must contain only one email; found value was '${this.adminEmail}'.`);
        }
        this.prependDomainWithStackStage = (_b = this.node.tryGetContext('prependDomainWithStackStage')) !== null && _b !== void 0 ? _b : false;
        this.cloudFrontDomain =
            this.node.tryGetContext('cloudFrontDomain') !== undefined
                ? !this.prependDomainWithStackStage &&
                    this.node.tryGetContext('stackStage') !== undefined
                    ? this.node.tryGetContext('cloudFrontDomain')
                    : `${this.node.tryGetContext('stackStage').toLowerCase()}.${this.node.tryGetContext('cloudFrontDomain')}`
                : undefined;
        this.enableMediaPackage = (_c = convertToBool(this.node.tryGetContext('enableMediaPackage'))) !== null && _c !== void 0 ? _c : false;
        this.enableSns = (_d = convertToBool(this.node.tryGetContext('enableSns'))) !== null && _d !== void 0 ? _d : false;
        this.enableSqs = (_e = convertToBool(this.node.tryGetContext('enableSqs'))) !== null && _e !== void 0 ? _e : false;
        this.frameCapture = (_f = convertToBool(this.node.tryGetContext('frameCapture'))) !== null && _f !== void 0 ? _f : false;
        this.glacier = (_g = this.node.tryGetContext('glacier')) !== null && _g !== void 0 ? _g : 'DISABLED';
        if (this.glacier &&
            !['DEEP_ARCHIVE', 'DISABLED', 'GLACIER'].includes(this.glacier)) {
            throw new Error(`The 'glacier' context variable must be one of 'DEEP_ARCHIVE', 'DISABLED', or 'GLACIER'; found value was '${this.glacier}'.`);
        }
        this.hostedZoneId = this.node.tryGetContext('hostedZoneId');
        this.sendAnonymousMetrics = (_h = convertToBool(this.node.tryGetContext('sendAnonymousMetrics'))) !== null && _h !== void 0 ? _h : false;
        this.workflowTrigger = (_j = this.node.tryGetContext('workflowTrigger')) !== null && _j !== void 0 ? _j : 'VideoFile';
        if (this.workflowTrigger &&
            !['VideoFile', 'MetadataFile'].includes(this.workflowTrigger)) {
            throw new Error(`The 'workflowTrigger' context variable must either be 'VideoFile' or 'MetadataFile'; found value was '${this.workflowTrigger}'.`);
        }
    }
}
exports.ContextVariables = ContextVariables;
//# sourceMappingURL=data:application/json;base64,