"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rules = void 0;
const cdk = require("@aws-cdk/core");
const events = require("@aws-cdk/aws-events");
const targets = require("@aws-cdk/aws-events-targets");
class Rules extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // create rule
        this.encodeComplete = new events.Rule(this, 'EncodeCompleteRule', {
            ruleName: `${props.stackName}-EncodeCompleteRule`,
            description: 'MediaConvert Completed event rule',
        });
        // add event pattern for rule
        this.encodeComplete.addEventPattern(props.eventPatterns.encodeComplete);
        // add event target for rule
        this.encodeComplete.addTarget(new targets.LambdaFunction(props.lambdaFunctions.stepFunctions));
        this.encodeError = new events.Rule(this, 'EncodeErrorRule', {
            ruleName: `${props.stackName}-EncodeErrorRule`,
            description: 'MediaConvert Error event rule',
        });
        this.encodeError.addEventPattern(props.eventPatterns.encodeError);
        this.encodeError.addTarget(new targets.LambdaFunction(props.lambdaFunctions.errorHandler));
    }
}
exports.Rules = Rules;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJydWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLHVEQUF1RDtBQVV2RCxNQUFhLEtBQU0sU0FBUSxHQUFHLENBQUMsU0FBUztJQUl0QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWlCO1FBQzdELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsY0FBYztRQUNkLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUNoRSxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUMsU0FBUyxxQkFBcUI7WUFDakQsV0FBVyxFQUFFLG1DQUFtQztTQUNqRCxDQUFDLENBQUM7UUFFSCw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV4RSw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQzNCLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUNoRSxDQUFDO1FBRUYsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFO1lBQzFELFFBQVEsRUFBRSxHQUFHLEtBQUssQ0FBQyxTQUFTLGtCQUFrQjtZQUM5QyxXQUFXLEVBQUUsK0JBQStCO1NBQzdDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFbEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQ3hCLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUMvRCxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBaENELHNCQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tICdAYXdzLWNkay9hd3MtZXZlbnRzJztcbmltcG9ydCAqIGFzIHRhcmdldHMgZnJvbSAnQGF3cy1jZGsvYXdzLWV2ZW50cy10YXJnZXRzJztcbmltcG9ydCB7IEV2ZW50UGF0dGVybnMgfSBmcm9tICcuL2V2ZW50LXBhdHRlcm5zJztcbmltcG9ydCB7IExhbWJkYUZ1bmN0aW9ucyB9IGZyb20gJy4vbGFtYmRhLWZ1bmN0aW9ucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVsZXNQcm9wcyB7XG4gIGV2ZW50UGF0dGVybnM6IEV2ZW50UGF0dGVybnM7XG4gIGxhbWJkYUZ1bmN0aW9uczogTGFtYmRhRnVuY3Rpb25zO1xuICBzdGFja05hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFJ1bGVzIGV4dGVuZHMgY2RrLkNvbnN0cnVjdCB7XG4gIHB1YmxpYyByZWFkb25seSBlbmNvZGVDb21wbGV0ZTogZXZlbnRzLlJ1bGU7XG4gIHB1YmxpYyByZWFkb25seSBlbmNvZGVFcnJvcjogZXZlbnRzLlJ1bGU7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBSdWxlc1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIC8vIGNyZWF0ZSBydWxlXG4gICAgdGhpcy5lbmNvZGVDb21wbGV0ZSA9IG5ldyBldmVudHMuUnVsZSh0aGlzLCAnRW5jb2RlQ29tcGxldGVSdWxlJywge1xuICAgICAgcnVsZU5hbWU6IGAke3Byb3BzLnN0YWNrTmFtZX0tRW5jb2RlQ29tcGxldGVSdWxlYCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTWVkaWFDb252ZXJ0IENvbXBsZXRlZCBldmVudCBydWxlJyxcbiAgICB9KTtcblxuICAgIC8vIGFkZCBldmVudCBwYXR0ZXJuIGZvciBydWxlXG4gICAgdGhpcy5lbmNvZGVDb21wbGV0ZS5hZGRFdmVudFBhdHRlcm4ocHJvcHMuZXZlbnRQYXR0ZXJucy5lbmNvZGVDb21wbGV0ZSk7XG5cbiAgICAvLyBhZGQgZXZlbnQgdGFyZ2V0IGZvciBydWxlXG4gICAgdGhpcy5lbmNvZGVDb21wbGV0ZS5hZGRUYXJnZXQoXG4gICAgICBuZXcgdGFyZ2V0cy5MYW1iZGFGdW5jdGlvbihwcm9wcy5sYW1iZGFGdW5jdGlvbnMuc3RlcEZ1bmN0aW9ucylcbiAgICApO1xuXG4gICAgdGhpcy5lbmNvZGVFcnJvciA9IG5ldyBldmVudHMuUnVsZSh0aGlzLCAnRW5jb2RlRXJyb3JSdWxlJywge1xuICAgICAgcnVsZU5hbWU6IGAke3Byb3BzLnN0YWNrTmFtZX0tRW5jb2RlRXJyb3JSdWxlYCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTWVkaWFDb252ZXJ0IEVycm9yIGV2ZW50IHJ1bGUnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5lbmNvZGVFcnJvci5hZGRFdmVudFBhdHRlcm4ocHJvcHMuZXZlbnRQYXR0ZXJucy5lbmNvZGVFcnJvcik7XG5cbiAgICB0aGlzLmVuY29kZUVycm9yLmFkZFRhcmdldChcbiAgICAgIG5ldyB0YXJnZXRzLkxhbWJkYUZ1bmN0aW9uKHByb3BzLmxhbWJkYUZ1bmN0aW9ucy5lcnJvckhhbmRsZXIpXG4gICAgKTtcbiAgfVxufSJdfQ==