"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkVodSolutionStack = void 0;
const cdk = require("@aws-cdk/core");
const cloudfront_origin_access_identities_1 = require("./cloudfront-origin-access-identities");
const cloudfronts_1 = require("./cloudfronts");
const custom_resources_1 = require("./custom-resources");
const dynamodb_tables_1 = require("./dynamodb-tables");
const event_patterns_1 = require("./event-patterns");
const iam_roles_1 = require("./iam-roles");
const kms_keys_1 = require("./kms-keys");
const lambda_functions_1 = require("./lambda-functions");
const lambda_permissions_1 = require("./lambda-permissions");
const outputs_1 = require("./outputs");
const policy_documents_1 = require("./policy-documents");
const policy_statements_1 = require("./policy-statements");
const rules_1 = require("./rules");
const s3_buckets_1 = require("./s3-buckets");
const sns_topics_1 = require("./sns-topics");
const sqs_queues_1 = require("./sqs-queues");
const step_functions_1 = require("./step-functions");
const step_functions_choices_1 = require("./step-functions-choices");
const step_functions_passes_1 = require("./step-functions-passes");
const step_functions_tasks_1 = require("./step-functions-tasks");
const _context_variables_1 = require("./_context-variables");
class CdkVodSolutionStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Set constant values from the Stack
        const account = this.account;
        const partition = this.partition;
        const region = this.region;
        const stackName = this.stackName;
        // Import Context Variables
        const contextVariables = new _context_variables_1.ContextVariables(this, 'ContextVariables', {});
        // Initialize Custom Constructs
        const cloudfrontOriginAccessIdentities = new cloudfront_origin_access_identities_1.CloudfrontOriginAccessIdentities(this, 'CloudFrontOriginAccessIdentities', {
            stackName: stackName,
        });
        const dynamoDbTables = new dynamodb_tables_1.DynamoDbTables(this, 'DynamoDbTables', {
            stackName: stackName,
        });
        const eventPatterns = new event_patterns_1.EventPatterns(this, 'EventPatterns', {
            stackName: stackName,
        });
        const kmsKeys = new kms_keys_1.KmsKeys(this, 'KmsKeys', {
            stackName: stackName,
        });
        const lambdaPermissions = new lambda_permissions_1.LambdaPermissions(this, 'Permissions', {
            stackName: stackName,
        });
        const s3Buckets = new s3_buckets_1.S3Buckets(this, 'S3Buckets', {
            stackName: stackName,
        });
        const snsTopics = new sns_topics_1.SnsTopics(this, 'SnsTopics', {
            adminEmail: contextVariables.adminEmail,
            kmsKeys: kmsKeys,
            stackName: stackName,
        });
        const sqsQueues = new sqs_queues_1.SqsQueues(this, 'SqsQueues', {
            kmsKeys: kmsKeys,
            stackName: stackName,
        });
        const cloudFronts = new cloudfronts_1.CloudFronts(this, 'CloudFronts', {
            cloudFrontDomain: contextVariables.cloudFrontDomain,
            cloudfrontOriginAccessIdentities: cloudfrontOriginAccessIdentities,
            hostedZoneId: contextVariables.hostedZoneId,
            region: region,
            s3Buckets: s3Buckets,
            stackName: stackName,
        });
        const policyStatements = new policy_statements_1.PolicyStatements(this, 'PolicyStatements', {
            account: account,
            cloudFronts: cloudFronts,
            cloudfrontOriginAccessIdentities: cloudfrontOriginAccessIdentities,
            dynamoDbTables: dynamoDbTables,
            kmsKeys: kmsKeys,
            partition: partition,
            region: region,
            s3Buckets: s3Buckets,
            snsTopics: snsTopics,
            sqsQueues: sqsQueues,
            stackName: stackName,
        });
        const policyDocuments = new policy_documents_1.PolicyDocuments(this, 'PolicyDocuments', {
            policyStatements: policyStatements,
            stackName: stackName,
        });
        const iamRoles = new iam_roles_1.IamRoles(this, 'IamRoles', {
            policyDocuments: policyDocuments,
            policyStatements: policyStatements,
            stackName: stackName,
        });
        const lambdaFunctions = new lambda_functions_1.LambdaFunctions(this, 'LambdaFunctions', {
            acceleratedTranscoding: contextVariables.acceleratedTranscoding,
            account: account,
            cloudFronts: cloudFronts,
            dynamoDbTables: dynamoDbTables,
            enableMediaPackage: contextVariables.enableMediaPackage,
            enableSns: contextVariables.enableSns,
            enableSqs: contextVariables.enableSqs,
            frameCapture: contextVariables.frameCapture,
            glacier: contextVariables.glacier,
            iamRoles: iamRoles,
            lambdaPermissions: lambdaPermissions,
            partition: partition,
            region: region,
            s3Buckets: s3Buckets,
            snsTopics: snsTopics,
            sqsQueues: sqsQueues,
            stackName: stackName,
        });
        const rules = new rules_1.Rules(this, 'Rules', {
            eventPatterns: eventPatterns,
            lambdaFunctions: lambdaFunctions,
            stackName: stackName,
        });
        const customResources = new custom_resources_1.CustomResources(this, 'CustomResources', {
            cloudFronts: cloudFronts,
            enableMediaPackage: contextVariables.enableMediaPackage,
            frameCapture: contextVariables.frameCapture,
            glacier: contextVariables.glacier,
            lambdaFunctions: lambdaFunctions,
            s3Buckets: s3Buckets,
            sendAnonymousMetrics: contextVariables.sendAnonymousMetrics,
            stackName: stackName,
            workflowTrigger: contextVariables.workflowTrigger,
        });
        const outputs = new outputs_1.Outputs(this, 'Outputs', {
            cloudFronts: cloudFronts,
            customResources: customResources,
            dynamoDbTables: dynamoDbTables,
            s3Buckets: s3Buckets,
            snsTopics: snsTopics,
            sqsQueues: sqsQueues,
            stackName: stackName,
        });
        const stepFunctionsChoices = new step_functions_choices_1.StepFunctionsChoices(this, 'StepFunctionsChoices', {
            stackName: stackName,
        });
        const stepFunctionsPasses = new step_functions_passes_1.StepFunctionsPasses(this, 'StepFunctionsPasses', {
            stackName: stackName,
        });
        const stepFunctionsTasks = new step_functions_tasks_1.StepFunctionsTasks(this, 'StepFunctionsTasks', {
            lambdaFunctions: lambdaFunctions,
            stackName: stackName,
        });
        const stepFunctions = new step_functions_1.StepFunctions(this, 'StepFunctions', {
            iamRoles: iamRoles,
            stackName: stackName,
            stepFunctionsChoices: stepFunctionsChoices,
            stepFunctionsPasses: stepFunctionsPasses,
            stepFunctionsTasks: stepFunctionsTasks,
        });
        // Add IamRoles to PolicyStatements as resources
        // This must be done here to prevent circular dependency issues
        policyStatements.encodeRoleIam.addResources(iamRoles.mediaConvert.roleArn);
        policyStatements.mediaPackageAssetRoleIam.addResources(iamRoles.mediaPackageVod.roleArn);
        // Associate destinationBucket PolicyStatement with destination S3Bucket
        // This must be done here to prevent circular dependency issues
        s3Buckets.destination.addToResourcePolicy(policyStatements.destinationBucket);
        // Add environment variables to LambdaFunctions
        // This must be done here to prevent circular dependency issues
        lambdaFunctions.encode.addEnvironment('EndPoint', customResources.mediaConvertEndPoint.getAttString('EndpointUrl'));
        lambdaFunctions.outputValidate.addEnvironment('EndPoint', customResources.mediaConvertEndPoint.getAttString('EndpointUrl'));
        lambdaFunctions.mediaPackageAssets.addEnvironment('GroupId', customResources.mediaPackageVod.getAttString('GroupId'));
        lambdaFunctions.mediaPackageAssets.addEnvironment('GroupDomainName', customResources.mediaPackageVod.getAttString('GroupDomainName'));
    }
}
exports.CdkVodSolutionStack = CdkVodSolutionStack;
//# sourceMappingURL=data:application/json;base64,