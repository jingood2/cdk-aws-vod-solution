import * as cdk from '@aws-cdk/core';
import * as iam from '@aws-cdk/aws-iam';
import { CloudFronts } from './cloudfronts';
import { CloudfrontOriginAccessIdentities } from './cloudfront-origin-access-identities';
import { DynamoDbTables } from './dynamodb-tables';
import { KmsKeys } from './kms-keys';
import { S3Buckets } from './s3-buckets';
import { SnsTopics } from './sns-topics';
import { SqsQueues } from './sqs-queues';
export interface PolicyStatementsProps {
    account: string;
    cloudFronts: CloudFronts;
    cloudfrontOriginAccessIdentities: CloudfrontOriginAccessIdentities;
    dynamoDbTables: DynamoDbTables;
    kmsKeys: KmsKeys;
    partition: string;
    region: string;
    s3Buckets: S3Buckets;
    snsTopics: SnsTopics;
    sqsQueues: SqsQueues;
    stackName: string;
}
export declare class PolicyStatements extends cdk.Construct {
    readonly archiveSourceRoleLambda: iam.PolicyStatement;
    readonly archiveSourceRoleLogs: iam.PolicyStatement;
    readonly archiveSourceRoleS3: iam.PolicyStatement;
    readonly customResourceRoleCloudFront: iam.PolicyStatement;
    readonly customResourceRoleLogs: iam.PolicyStatement;
    readonly customResourceRoleMediaConvert: iam.PolicyStatement;
    readonly customResourceRoleS3: iam.PolicyStatement;
    readonly customResourceRoleMediaPackageCreateList: iam.PolicyStatement;
    readonly customResourceRoleMediaPackageDelete: iam.PolicyStatement;
    readonly customResourceRoleMediaPackageDescribeDelete: iam.PolicyStatement;
    readonly destinationBucket: iam.PolicyStatement;
    readonly dynamoDbUpdateRoleLambda: iam.PolicyStatement;
    readonly dynamoDbUpdateRoleLogs: iam.PolicyStatement;
    readonly dynamoDbUpdateRoleDynamoDb: iam.PolicyStatement;
    readonly encodeRoleIam: iam.PolicyStatement;
    readonly encodeRoleLambda: iam.PolicyStatement;
    readonly encodeRoleLogs: iam.PolicyStatement;
    readonly encodeRoleMediaConvert: iam.PolicyStatement;
    readonly encodeRoleS3GetObject: iam.PolicyStatement;
    readonly encodeRoleS3PutObject: iam.PolicyStatement;
    readonly errorHandlerRoleDynamoDb: iam.PolicyStatement;
    readonly errorHandlerRoleKms: iam.PolicyStatement;
    readonly errorHandlerRoleLogs: iam.PolicyStatement;
    readonly errorHandlerRoleSns: iam.PolicyStatement;
    readonly inputValidateRoleLambda: iam.PolicyStatement;
    readonly inputValidateRoleLogs: iam.PolicyStatement;
    readonly inputValidateRoleS3: iam.PolicyStatement;
    readonly mediaConvertRoleExecuteApi: iam.PolicyStatement;
    readonly mediaConvertRoleS3: iam.PolicyStatement;
    readonly mediaInfoRoleLambda: iam.PolicyStatement;
    readonly mediaInfoRoleLogs: iam.PolicyStatement;
    readonly mediaInfoRoleS3: iam.PolicyStatement;
    readonly mediaPackageAssetRoleIam: iam.PolicyStatement;
    readonly mediaPackageAssetRoleLambda: iam.PolicyStatement;
    readonly mediaPackageAssetRoleLogs: iam.PolicyStatement;
    readonly mediaPackageAssetRoleMediaPackage: iam.PolicyStatement;
    readonly mediaPackageVodRoleS3: iam.PolicyStatement;
    readonly outputValidateRoleDynamoDb: iam.PolicyStatement;
    readonly outputValidateRoleLambda: iam.PolicyStatement;
    readonly outputValidateRoleLogs: iam.PolicyStatement;
    readonly outputValidateRoleS3: iam.PolicyStatement;
    readonly profilerRoleDynamoDb: iam.PolicyStatement;
    readonly profilerRoleLambda: iam.PolicyStatement;
    readonly profilerRoleLogs: iam.PolicyStatement;
    readonly snsNotificationRoleKms: iam.PolicyStatement;
    readonly snsNotificationRoleLambda: iam.PolicyStatement;
    readonly snsNotificationRoleLogs: iam.PolicyStatement;
    readonly snsNotificationRoleSns: iam.PolicyStatement;
    readonly sqsSendMessageRoleKms: iam.PolicyStatement;
    readonly sqsSendMessageRoleLambda: iam.PolicyStatement;
    readonly sqsSendMessageRoleLogs: iam.PolicyStatement;
    readonly sqsSendMessageRoleSqs: iam.PolicyStatement;
    readonly stepFunctionsRoleLambda: iam.PolicyStatement;
    readonly stepFunctionsRoleLogs: iam.PolicyStatement;
    readonly stepFunctionsRoleStates: iam.PolicyStatement;
    readonly stepFunctionServiceRoleLambda: iam.PolicyStatement;
    constructor(scope: cdk.Construct, id: string, props: PolicyStatementsProps);
}
