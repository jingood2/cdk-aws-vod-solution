"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepFunctions = void 0;
const cdk = require("@aws-cdk/core");
const stepfunctions = require("@aws-cdk/aws-stepfunctions");
class StepFunctions extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.ingestWorkflowChain =
            props.stepFunctionsTasks.ingestWorkflowInputValidate
                .next(props.stepFunctionsTasks.ingestWorkflowMediaInfo)
                .next(props.stepFunctionsTasks.ingestWorkflowDynamoDbUpdate)
                .next(props.stepFunctionsChoices.ingestWorkflowSnsChoice
                .when(stepfunctions.Condition.booleanEquals('$.enableSns', true), props.stepFunctionsTasks.ingestWorkflowSnsNotifications.next(props.stepFunctionsTasks.ingestWorkflowProcessExecute))
                .otherwise(props.stepFunctionsTasks.ingestWorkflowProcessExecute));
        this.ingestWorkflowStateMachine = new stepfunctions.StateMachine(this, 'IngestWorkflowStateMachine', {
            stateMachineName: `${props.stackName}-IngestWorkflowStateMachine`,
            definition: this.ingestWorkflowChain,
            role: props.iamRoles.stepFunctionsService,
        });
        this.processWorkflowChain =
            props.stepFunctionsTasks.processWorkflowProfiler.next(props.stepFunctionsChoices.processWorkflowEncodingProfileCheck
                .when(stepfunctions.Condition.booleanEquals('$.isCustomTemplate', true), props.stepFunctionsPasses.processWorkflowCustomJobTemplate)
                .when(stepfunctions.Condition.numberEquals('$.encodingProfile', 2160), props.stepFunctionsPasses.processWorkflowJobTemplate2160p)
                .when(stepfunctions.Condition.numberEquals('$.encodingProfile', 1080), props.stepFunctionsPasses.processWorkflowJobTemplate1080p)
                .when(stepfunctions.Condition.numberEquals('$.encodingProfile', 720), props.stepFunctionsPasses.processWorkflowJobTemplate720p)
                .afterwards()
                .next(props.stepFunctionsChoices.processWorkflowAcceleratedTranscodingCheck
                .when(stepfunctions.Condition.stringEquals('$.acceleratedTranscoding', 'ENABLED'), props.stepFunctionsPasses
                .processWorkflowAcceleratedTranscodingEnabled)
                .when(stepfunctions.Condition.stringEquals('$.acceleratedTranscoding', 'PREFERRED'), props.stepFunctionsPasses
                .processWorkflowAcceleratedTranscodingPreferred)
                .when(stepfunctions.Condition.stringEquals('$.acceleratedTranscoding', 'DISABLED'), props.stepFunctionsPasses
                .processWorkflowAcceleratedTranscodingDisabled)
                .afterwards()
                .next(props.stepFunctionsChoices.processWorkflowFrameCaptureCheck
                .when(stepfunctions.Condition.booleanEquals('$.frameCapture', true), props.stepFunctionsPasses.processWorkflowFrameCaptureOn)
                .otherwise(props.stepFunctionsPasses.processWorkflowFrameCaptureOff)
                .afterwards()
                .next(props.stepFunctionsTasks.processWorkflowEncodeJobSubmit)
                .next(props.stepFunctionsTasks.processWorkflowDynamoDbUpdate))));
        this.processWorkflowStateMachine = new stepfunctions.StateMachine(this, 'ProcessWorkflowStateMachine', {
            stateMachineName: `${props.stackName}-ProcessWorkflowStateMachine`,
            definition: this.processWorkflowChain,
            role: props.iamRoles.stepFunctionsService,
        });
        this.publishWorkflowChain =
            props.stepFunctionsTasks.publishWorkflowValidateEncodingOutput.next(props.stepFunctionsChoices.publishWorkflowArchiveSource
                .when(stepfunctions.Condition.stringEquals('$.archiveSource', 'GLACIER'), props.stepFunctionsTasks.publishWorkflowArchive.next(props.stepFunctionsChoices.publishWorkflowMediaPackage))
                .when(stepfunctions.Condition.stringEquals('$.archiveSource', 'DEEP_ARCHIVE'), props.stepFunctionsTasks.publishWorkflowDeepArchive.next(props.stepFunctionsChoices.publishWorkflowMediaPackage))
                .otherwise(props.stepFunctionsChoices.publishWorkflowMediaPackage
                .when(stepfunctions.Condition.booleanEquals('$.enableMediaPackage', true), props.stepFunctionsTasks.publishWorkflowMediaPackageAssets.next(props.stepFunctionsTasks.publishWorkflowDynamoDbUpdate))
                .otherwise(props.stepFunctionsTasks.publishWorkflowDynamoDbUpdate.next(props.stepFunctionsChoices.publishWorkflowSqs
                .when(stepfunctions.Condition.booleanEquals('$.enableSqs', true), props.stepFunctionsTasks.publishWorkflowSqsSendMessage.next(props.stepFunctionsChoices.publishWorkflowSns))
                .otherwise(props.stepFunctionsChoices.publishWorkflowSns
                .when(stepfunctions.Condition.booleanEquals('$.enableSns', true), props.stepFunctionsTasks.publishWorkflowSnsNotification.next(props.stepFunctionsPasses.publishWorkflowComplete))
                .otherwise(props.stepFunctionsPasses.publishWorkflowComplete))))));
        this.publishWorkflowStateMachine = new stepfunctions.StateMachine(this, 'PublishWorkflowStateMachine', {
            stateMachineName: `${props.stackName}-PublishWorkflowStateMachine`,
            definition: this.publishWorkflowChain,
            role: props.iamRoles.stepFunctionsService,
        });
    }
}
exports.StepFunctions = StepFunctions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC1mdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdGVwLWZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsNERBQTREO0FBYzVELE1BQWEsYUFBYyxTQUFRLEdBQUcsQ0FBQyxTQUFTO0lBYTlDLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBeUI7UUFDckUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixJQUFJLENBQUMsbUJBQW1CO1lBQ3RCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQywyQkFBMkI7aUJBQ2pELElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsdUJBQXVCLENBQUM7aUJBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsNEJBQTRCLENBQUM7aUJBQzNELElBQUksQ0FDSCxLQUFLLENBQUMsb0JBQW9CLENBQUMsdUJBQXVCO2lCQUMvQyxJQUFJLENBQ0gsYUFBYSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUMxRCxLQUFLLENBQUMsa0JBQWtCLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUMxRCxLQUFLLENBQUMsa0JBQWtCLENBQUMsNEJBQTRCLENBQ3RELENBQ0Y7aUJBQ0EsU0FBUyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUNwRSxDQUFDO1FBRU4sSUFBSSxDQUFDLDBCQUEwQixHQUFHLElBQUksYUFBYSxDQUFDLFlBQVksQ0FDOUQsSUFBSSxFQUNKLDRCQUE0QixFQUM1QjtZQUNFLGdCQUFnQixFQUFFLEdBQUcsS0FBSyxDQUFDLFNBQVMsNkJBQTZCO1lBQ2pFLFVBQVUsRUFBRSxJQUFJLENBQUMsbUJBQW1CO1lBQ3BDLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLG9CQUFvQjtTQUMxQyxDQUNGLENBQUM7UUFFRixJQUFJ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WSxDQUMvRCxJQUFJLEVBQ0osNkJBQTZCLEVBQzdCO1lBQ0UsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUMsU0FBUyw4QkFBOEI7WUFDbEUsVUFBVSxFQUFFLElBQUksQ0FBQyxvQkFBb0I7WUFDckMsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsb0JBQW9CO1NBQzFDLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXBLRCxzQ0FvS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBzdGVwZnVuY3Rpb25zIGZyb20gJ0Bhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zJztcbmltcG9ydCB7IFN0ZXBGdW5jdGlvbnNDaG9pY2VzIH0gZnJvbSAnLi9zdGVwLWZ1bmN0aW9ucy1jaG9pY2VzJztcbmltcG9ydCB7IFN0ZXBGdW5jdGlvbnNQYXNzZXMgfSBmcm9tICcuL3N0ZXAtZnVuY3Rpb25zLXBhc3Nlcyc7XG5pbXBvcnQgeyBTdGVwRnVuY3Rpb25zVGFza3MgfSBmcm9tICcuL3N0ZXAtZnVuY3Rpb25zLXRhc2tzJztcbmltcG9ydCB7IElhbVJvbGVzIH0gZnJvbSAnLi9pYW0tcm9sZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0ZXBGdW5jdGlvbnNQcm9wcyB7XG4gIGlhbVJvbGVzOiBJYW1Sb2xlcztcbiAgc3RhY2tOYW1lOiBzdHJpbmc7XG4gIHN0ZXBGdW5jdGlvbnNDaG9pY2VzOiBTdGVwRnVuY3Rpb25zQ2hvaWNlcztcbiAgc3RlcEZ1bmN0aW9uc1Bhc3NlczogU3RlcEZ1bmN0aW9uc1Bhc3NlcztcbiAgc3RlcEZ1bmN0aW9uc1Rhc2tzOiBTdGVwRnVuY3Rpb25zVGFza3M7XG59XG5cbmV4cG9ydCBjbGFzcyBTdGVwRnVuY3Rpb25zIGV4dGVuZHMgY2RrLkNvbnN0cnVjdCB7XG4gIC8vIEluZ2VzdCBXb3JrZmxvdyBTdGF0ZU1hY2hpbmUsIENoYWluLCBhbmQgU3RhdGVzXG4gIHB1YmxpYyByZWFkb25seSBpbmdlc3RXb3JrZmxvd1N0YXRlTWFjaGluZTogc3RlcGZ1bmN0aW9ucy5TdGF0ZU1hY2hpbmU7XG4gIHB1YmxpYyByZWFkb25seSBpbmdlc3RXb3JrZmxvd0NoYWluOiBzdGVwZnVuY3Rpb25zLkNoYWluO1xuXG4gIC8vIFByb2Nlc3MgV29ya2Zsb3cgU3RhdGVNYWNoaW5lLCBDaGFpbiwgYW5kIFN0YXRlc1xuICBwdWJsaWMgcmVhZG9ubHkgcHJvY2Vzc1dvcmtmbG93U3RhdGVNYWNoaW5lOiBzdGVwZnVuY3Rpb25zLlN0YXRlTWFjaGluZTtcbiAgcHVibGljIHJlYWRvbmx5IHByb2Nlc3NXb3JrZmxvd0NoYWluOiBzdGVwZnVuY3Rpb25zLkNoYWluO1xuXG4gIC8vIFB1Ymxpc2ggV29ya2Zsb3cgU3RhdGVNYWNoaW5lLCBDaGFpbiwgYW5kIFN0YXRlc1xuICBwdWJsaWMgcmVhZG9ubHkgcHVibGlzaFdvcmtmbG93U3RhdGVNYWNoaW5lOiBzdGVwZnVuY3Rpb25zLlN0YXRlTWFjaGluZTtcbiAgcHVibGljIHJlYWRvbmx5IHB1Ymxpc2hXb3JrZmxvd0NoYWluOiBzdGVwZnVuY3Rpb25zLkNoYWluO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU3RlcEZ1bmN0aW9uc1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIHRoaXMuaW5nZXN0V29ya2Zsb3dDaGFpbiA9XG4gICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zVGFza3MuaW5nZXN0V29ya2Zsb3dJbnB1dFZhbGlkYXRlXG4gICAgICAgIC5uZXh0KHByb3BzLnN0ZXBGdW5jdGlvbnNUYXNrcy5pbmdlc3RXb3JrZmxvd01lZGlhSW5mbylcbiAgICAgICAgLm5leHQocHJvcHMuc3RlcEZ1bmN0aW9uc1Rhc2tzLmluZ2VzdFdvcmtmbG93RHluYW1vRGJVcGRhdGUpXG4gICAgICAgIC5uZXh0KFxuICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNDaG9pY2VzLmluZ2VzdFdvcmtmbG93U25zQ2hvaWNlXG4gICAgICAgICAgICAud2hlbihcbiAgICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24uYm9vbGVhbkVxdWFscygnJC5lbmFibGVTbnMnLCB0cnVlKSxcbiAgICAgICAgICAgICAgcHJvcHMuc3RlcEZ1bmN0aW9uc1Rhc2tzLmluZ2VzdFdvcmtmbG93U25zTm90aWZpY2F0aW9ucy5uZXh0KFxuICAgICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNUYXNrcy5pbmdlc3RXb3JrZmxvd1Byb2Nlc3NFeGVjdXRlXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5vdGhlcndpc2UocHJvcHMuc3RlcEZ1bmN0aW9uc1Rhc2tzLmluZ2VzdFdvcmtmbG93UHJvY2Vzc0V4ZWN1dGUpXG4gICAgICAgICk7XG5cbiAgICB0aGlzLmluZ2VzdFdvcmtmbG93U3RhdGVNYWNoaW5lID0gbmV3IHN0ZXBmdW5jdGlvbnMuU3RhdGVNYWNoaW5lKFxuICAgICAgdGhpcyxcbiAgICAgICdJbmdlc3RXb3JrZmxvd1N0YXRlTWFjaGluZScsXG4gICAgICB7XG4gICAgICAgIHN0YXRlTWFjaGluZU5hbWU6IGAke3Byb3BzLnN0YWNrTmFtZX0tSW5nZXN0V29ya2Zsb3dTdGF0ZU1hY2hpbmVgLFxuICAgICAgICBkZWZpbml0aW9uOiB0aGlzLmluZ2VzdFdvcmtmbG93Q2hhaW4sXG4gICAgICAgIHJvbGU6IHByb3BzLmlhbVJvbGVzLnN0ZXBGdW5jdGlvbnNTZXJ2aWNlLFxuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLnByb2Nlc3NXb3JrZmxvd0NoYWluID1cbiAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNUYXNrcy5wcm9jZXNzV29ya2Zsb3dQcm9maWxlci5uZXh0KFxuICAgICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zQ2hvaWNlcy5wcm9jZXNzV29ya2Zsb3dFbmNvZGluZ1Byb2ZpbGVDaGVja1xuICAgICAgICAgIC53aGVuKFxuICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24uYm9vbGVhbkVxdWFscygnJC5pc0N1c3RvbVRlbXBsYXRlJywgdHJ1ZSksXG4gICAgICAgICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zUGFzc2VzLnByb2Nlc3NXb3JrZmxvd0N1c3RvbUpvYlRlbXBsYXRlXG4gICAgICAgICAgKVxuICAgICAgICAgIC53aGVuKFxuICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24ubnVtYmVyRXF1YWxzKCckLmVuY29kaW5nUHJvZmlsZScsIDIxNjApLFxuICAgICAgICAgICAgcHJvcHMuc3RlcEZ1bmN0aW9uc1Bhc3Nlcy5wcm9jZXNzV29ya2Zsb3dKb2JUZW1wbGF0ZTIxNjBwXG4gICAgICAgICAgKVxuICAgICAgICAgIC53aGVuKFxuICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24ubnVtYmVyRXF1YWxzKCckLmVuY29kaW5nUHJvZmlsZScsIDEwODApLFxuICAgICAgICAgICAgcHJvcHMuc3RlcEZ1bmN0aW9uc1Bhc3Nlcy5wcm9jZXNzV29ya2Zsb3dKb2JUZW1wbGF0ZTEwODBwXG4gICAgICAgICAgKVxuICAgICAgICAgIC53aGVuKFxuICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24ubnVtYmVyRXF1YWxzKCckLmVuY29kaW5nUHJvZmlsZScsIDcyMCksXG4gICAgICAgICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zUGFzc2VzLnByb2Nlc3NXb3JrZmxvd0pvYlRlbXBsYXRlNzIwcFxuICAgICAgICAgIClcbiAgICAgICAgICAuYWZ0ZXJ3YXJkcygpXG4gICAgICAgICAgLm5leHQoXG4gICAgICAgICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zQ2hvaWNlcy5wcm9jZXNzV29ya2Zsb3dBY2NlbGVyYXRlZFRyYW5zY29kaW5nQ2hlY2tcbiAgICAgICAgICAgICAgLndoZW4oXG4gICAgICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjY2VsZXJhdGVkVHJhbnNjb2RpbmcnLCAnRU5BQkxFRCcpLFxuICAgICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNQYXNzZXNcbiAgICAgICAgICAgICAgICAgIC5wcm9jZXNzV29ya2Zsb3dBY2NlbGVyYXRlZFRyYW5zY29kaW5nRW5hYmxlZFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC53aGVuKFxuICAgICAgICAgICAgICAgIHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hY2NlbGVyYXRlZFRyYW5zY29kaW5nJywgJ1BSRUZFUlJFRCcpLFxuICAgICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNQYXNzZXNcbiAgICAgICAgICAgICAgICAgIC5wcm9jZXNzV29ya2Zsb3dBY2NlbGVyYXRlZFRyYW5zY29kaW5nUHJlZmVycmVkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgLndoZW4oXG4gICAgICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLmFjY2VsZXJhdGVkVHJhbnNjb2RpbmcnLCAnRElTQUJMRUQnKSxcbiAgICAgICAgICAgICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zUGFzc2VzXG4gICAgICAgICAgICAgICAgICAucHJvY2Vzc1dvcmtmbG93QWNjZWxlcmF0ZWRUcmFuc2NvZGluZ0Rpc2FibGVkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgLmFmdGVyd2FyZHMoKVxuICAgICAgICAgICAgICAubmV4dChcbiAgICAgICAgICAgICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zQ2hvaWNlcy5wcm9jZXNzV29ya2Zsb3dGcmFtZUNhcHR1cmVDaGVja1xuICAgICAgICAgICAgICAgICAgLndoZW4oXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLmJvb2xlYW5FcXVhbHMoJyQuZnJhbWVDYXB0dXJlJywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNQYXNzZXMucHJvY2Vzc1dvcmtmbG93RnJhbWVDYXB0dXJlT25cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIC5vdGhlcndpc2UoXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNQYXNzZXMucHJvY2Vzc1dvcmtmbG93RnJhbWVDYXB0dXJlT2ZmXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAuYWZ0ZXJ3YXJkcygpXG4gICAgICAgICAgICAgICAgICAubmV4dChwcm9wcy5zdGVwRnVuY3Rpb25zVGFza3MucHJvY2Vzc1dvcmtmbG93RW5jb2RlSm9iU3VibWl0KVxuICAgICAgICAgICAgICAgICAgLm5leHQocHJvcHMuc3RlcEZ1bmN0aW9uc1Rhc2tzLnByb2Nlc3NXb3JrZmxvd0R5bmFtb0RiVXBkYXRlKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgKTtcblxuICAgIHRoaXMucHJvY2Vzc1dvcmtmbG93U3RhdGVNYWNoaW5lID0gbmV3IHN0ZXBmdW5jdGlvbnMuU3RhdGVNYWNoaW5lKFxuICAgICAgdGhpcyxcbiAgICAgICdQcm9jZXNzV29ya2Zsb3dTdGF0ZU1hY2hpbmUnLFxuICAgICAge1xuICAgICAgICBzdGF0ZU1hY2hpbmVOYW1lOiBgJHtwcm9wcy5zdGFja05hbWV9LVByb2Nlc3NXb3JrZmxvd1N0YXRlTWFjaGluZWAsXG4gICAgICAgIGRlZmluaXRpb246IHRoaXMucHJvY2Vzc1dvcmtmbG93Q2hhaW4sXG4gICAgICAgIHJvbGU6IHByb3BzLmlhbVJvbGVzLnN0ZXBGdW5jdGlvbnNTZXJ2aWNlLFxuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLnB1Ymxpc2hXb3JrZmxvd0NoYWluID1cbiAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNUYXNrcy5wdWJsaXNoV29ya2Zsb3dWYWxpZGF0ZUVuY29kaW5nT3V0cHV0Lm5leHQoXG4gICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNDaG9pY2VzLnB1Ymxpc2hXb3JrZmxvd0FyY2hpdmVTb3VyY2VcbiAgICAgICAgICAud2hlbihcbiAgICAgICAgICAgIHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hcmNoaXZlU291cmNlJywgJ0dMQUNJRVInKSxcbiAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNUYXNrcy5wdWJsaXNoV29ya2Zsb3dBcmNoaXZlLm5leHQoXG4gICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNDaG9pY2VzLnB1Ymxpc2hXb3JrZmxvd01lZGlhUGFja2FnZVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgICAud2hlbihcbiAgICAgICAgICAgIHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hcmNoaXZlU291cmNlJywgJ0RFRVBfQVJDSElWRScpLFxuICAgICAgICAgICAgcHJvcHMuc3RlcEZ1bmN0aW9uc1Rhc2tzLnB1Ymxpc2hXb3JrZmxvd0RlZXBBcmNoaXZlLm5leHQoXG4gICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNDaG9pY2VzLnB1Ymxpc2hXb3JrZmxvd01lZGlhUGFja2FnZVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgICAub3RoZXJ3aXNlKFxuICAgICAgICAgICAgcHJvcHMuc3RlcEZ1bmN0aW9uc0Nob2ljZXMucHVibGlzaFdvcmtmbG93TWVkaWFQYWNrYWdlXG4gICAgICAgICAgICAgIC53aGVuKFxuICAgICAgICAgICAgICAgIHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLmJvb2xlYW5FcXVhbHMoJyQuZW5hYmxlTWVkaWFQYWNrYWdlJywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgcHJvcHMuc3RlcEZ1bmN0aW9uc1Rhc2tzLnB1Ymxpc2hXb3JrZmxvd01lZGlhUGFja2FnZUFzc2V0cy5uZXh0KFxuICAgICAgICAgICAgICAgICAgcHJvcHMuc3RlcEZ1bmN0aW9uc1Rhc2tzLnB1Ymxpc2hXb3JrZmxvd0R5bmFtb0RiVXBkYXRlXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC5vdGhlcndpc2UoXG4gICAgICAgICAgICAgICAgcHJvcHMuc3RlcEZ1bmN0aW9uc1Rhc2tzLnB1Ymxpc2hXb3JrZmxvd0R5bmFtb0RiVXBkYXRlLm5leHQoXG4gICAgICAgICAgICAgICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zQ2hvaWNlcy5wdWJsaXNoV29ya2Zsb3dTcXNcbiAgICAgICAgICAgICAgICAgICAgLndoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24uYm9vbGVhbkVxdWFscygnJC5lbmFibGVTcXMnLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zVGFza3MucHVibGlzaFdvcmtmbG93U3FzU2VuZE1lc3NhZ2UubmV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNDaG9pY2VzLnB1Ymxpc2hXb3JrZmxvd1Nuc1xuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAub3RoZXJ3aXNlKFxuICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNDaG9pY2VzLnB1Ymxpc2hXb3JrZmxvd1Nuc1xuICAgICAgICAgICAgICAgICAgICAgICAgLndoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLmJvb2xlYW5FcXVhbHMoJyQuZW5hYmxlU25zJywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNUYXNrcy5wdWJsaXNoV29ya2Zsb3dTbnNOb3RpZmljYXRpb24ubmV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5zdGVwRnVuY3Rpb25zUGFzc2VzLnB1Ymxpc2hXb3JrZmxvd0NvbXBsZXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vdGhlcndpc2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnN0ZXBGdW5jdGlvbnNQYXNzZXMucHVibGlzaFdvcmtmbG93Q29tcGxldGVcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICk7XG5cbiAgICB0aGlzLnB1Ymxpc2hXb3JrZmxvd1N0YXRlTWFjaGluZSA9IG5ldyBzdGVwZnVuY3Rpb25zLlN0YXRlTWFjaGluZShcbiAgICAgIHRoaXMsXG4gICAgICAnUHVibGlzaFdvcmtmbG93U3RhdGVNYWNoaW5lJyxcbiAgICAgIHtcbiAgICAgICAgc3RhdGVNYWNoaW5lTmFtZTogYCR7cHJvcHMuc3RhY2tOYW1lfS1QdWJsaXNoV29ya2Zsb3dTdGF0ZU1hY2hpbmVgLFxuICAgICAgICBkZWZpbml0aW9uOiB0aGlzLnB1Ymxpc2hXb3JrZmxvd0NoYWluLFxuICAgICAgICByb2xlOiBwcm9wcy5pYW1Sb2xlcy5zdGVwRnVuY3Rpb25zU2VydmljZSxcbiAgICAgIH1cbiAgICApO1xuICB9XG59Il19