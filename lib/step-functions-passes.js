"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepFunctionsPasses = void 0;
const cdk = require("@aws-cdk/core");
const stepfunctions = require("@aws-cdk/aws-stepfunctions");
class StepFunctionsPasses extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.processWorkflowAcceleratedTranscodingDisabled = new stepfunctions.Pass(this, 'ProcessWorkflowAcceleratedTranscodingDisabledPass');
        this.processWorkflowAcceleratedTranscodingEnabled = new stepfunctions.Pass(this, 'processWorkflowAcceleratedTranscodingEnabledPass');
        this.processWorkflowAcceleratedTranscodingPreferred =
            new stepfunctions.Pass(this, 'processWorkflowAcceleratedTranscodingPreferredPass');
        this.processWorkflowCustomJobTemplate = new stepfunctions.Pass(this, 'ProcessWorkflowCustomJobTemplatePass');
        this.processWorkflowFrameCaptureOff = new stepfunctions.Pass(this, 'ProcessWorkflowFrameCaptureOffPass');
        this.processWorkflowFrameCaptureOn = new stepfunctions.Pass(this, 'ProcessWorkflowFrameCaptureOnPass');
        this.processWorkflowJobTemplate1080p = new stepfunctions.Pass(this, 'ProcessWorkflowJobTemplate1080pPass');
        this.processWorkflowJobTemplate2160p = new stepfunctions.Pass(this, 'ProcessWorkflowJobTemplate2160pPass');
        this.processWorkflowJobTemplate720p = new stepfunctions.Pass(this, 'ProcessWorkflowJobTemplate720pPass');
        this.publishWorkflowComplete = new stepfunctions.Pass(this, 'PublishWorkflowCompletePass');
    }
}
exports.StepFunctionsPasses = StepFunctionsPasses;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC1mdW5jdGlvbnMtcGFzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RlcC1mdW5jdGlvbnMtcGFzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFxQztBQUNyQyw0REFBNEQ7QUFNNUQsTUFBYSxtQkFBb0IsU0FBUSxHQUFHLENBQUMsU0FBUztJQWVwRCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQStCO1FBQzNFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLDZDQUE2QyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FDekUsSUFBSSxFQUNKLG1EQUFtRCxDQUNwRCxDQUFDO1FBRUYsSUFBSSxDQUFDLDRDQUE0QyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FDeEUsSUFBSSxFQUNKLGtEQUFrRCxDQUNuRCxDQUFDO1FBRUYsSUFBSSxDQUFDLDhDQUE4QztZQUNqRCxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQ3BCLElBQUksRUFDSixvREFBb0QsQ0FDckQsQ0FBQztRQUVKLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQzVELElBQUksRUFDSixzQ0FBc0MsQ0FDdkMsQ0FBQztRQUVGLElBQUksQ0FBQyw4QkFBOEIsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQzFELElBQUksRUFDSixvQ0FBb0MsQ0FDckMsQ0FBQztRQUVGLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQ3pELElBQUksRUFDSixtQ0FBbUMsQ0FDcEMsQ0FBQztRQUVGLElBQUksQ0FBQywrQkFBK0IsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQzNELElBQUksRUFDSixxQ0FBcUMsQ0FDdEMsQ0FBQztRQUVGLElBQUksQ0FBQywrQkFBK0IsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQzNELElBQUksRUFDSixxQ0FBcUMsQ0FDdEMsQ0FBQztRQUVGLElBQUksQ0FBQyw4QkFBOEIsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQzFELElBQUksRUFDSixvQ0FBb0MsQ0FDckMsQ0FBQztRQUVGLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQ25ELElBQUksRUFDSiw2QkFBNkIsQ0FDOUIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXJFRCxrREFxRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBzdGVwZnVuY3Rpb25zIGZyb20gJ0Bhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zJztcblxuZXhwb3J0IGludGVyZmFjZSBTdGVwRnVuY3Rpb25zUGFzc2VzUHJvcHMge1xuICBzdGFja05hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFN0ZXBGdW5jdGlvbnNQYXNzZXMgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcbiAgLy8gUHJvY2VzcyBXb3JrZmxvdyBQYXNzZXNcbiAgcHVibGljIHJlYWRvbmx5IHByb2Nlc3NXb3JrZmxvd0FjY2VsZXJhdGVkVHJhbnNjb2RpbmdEaXNhYmxlZDogc3RlcGZ1bmN0aW9ucy5QYXNzO1xuICBwdWJsaWMgcmVhZG9ubHkgcHJvY2Vzc1dvcmtmbG93QWNjZWxlcmF0ZWRUcmFuc2NvZGluZ0VuYWJsZWQ6IHN0ZXBmdW5jdGlvbnMuUGFzcztcbiAgcHVibGljIHJlYWRvbmx5IHByb2Nlc3NXb3JrZmxvd0FjY2VsZXJhdGVkVHJhbnNjb2RpbmdQcmVmZXJyZWQ6IHN0ZXBmdW5jdGlvbnMuUGFzcztcbiAgcHVibGljIHJlYWRvbmx5IHByb2Nlc3NXb3JrZmxvd0N1c3RvbUpvYlRlbXBsYXRlOiBzdGVwZnVuY3Rpb25zLlBhc3M7XG4gIHB1YmxpYyByZWFkb25seSBwcm9jZXNzV29ya2Zsb3dGcmFtZUNhcHR1cmVPZmY6IHN0ZXBmdW5jdGlvbnMuUGFzcztcbiAgcHVibGljIHJlYWRvbmx5IHByb2Nlc3NXb3JrZmxvd0ZyYW1lQ2FwdHVyZU9uOiBzdGVwZnVuY3Rpb25zLlBhc3M7XG4gIHB1YmxpYyByZWFkb25seSBwcm9jZXNzV29ya2Zsb3dKb2JUZW1wbGF0ZTEwODBwOiBzdGVwZnVuY3Rpb25zLlBhc3M7XG4gIHB1YmxpYyByZWFkb25seSBwcm9jZXNzV29ya2Zsb3dKb2JUZW1wbGF0ZTIxNjBwOiBzdGVwZnVuY3Rpb25zLlBhc3M7XG4gIHB1YmxpYyByZWFkb25seSBwcm9jZXNzV29ya2Zsb3dKb2JUZW1wbGF0ZTcyMHA6IHN0ZXBmdW5jdGlvbnMuUGFzcztcblxuICAvLyBQdWJsaXNoIFdvcmtmbG93IFBhc3Nlc1xuICBwdWJsaWMgcmVhZG9ubHkgcHVibGlzaFdvcmtmbG93Q29tcGxldGU6IHN0ZXBmdW5jdGlvbnMuUGFzcztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFN0ZXBGdW5jdGlvbnNQYXNzZXNQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICB0aGlzLnByb2Nlc3NXb3JrZmxvd0FjY2VsZXJhdGVkVHJhbnNjb2RpbmdEaXNhYmxlZCA9IG5ldyBzdGVwZnVuY3Rpb25zLlBhc3MoXG4gICAgICB0aGlzLFxuICAgICAgJ1Byb2Nlc3NXb3JrZmxvd0FjY2VsZXJhdGVkVHJhbnNjb2RpbmdEaXNhYmxlZFBhc3MnXG4gICAgKTtcblxuICAgIHRoaXMucHJvY2Vzc1dvcmtmbG93QWNjZWxlcmF0ZWRUcmFuc2NvZGluZ0VuYWJsZWQgPSBuZXcgc3RlcGZ1bmN0aW9ucy5QYXNzKFxuICAgICAgdGhpcyxcbiAgICAgICdwcm9jZXNzV29ya2Zsb3dBY2NlbGVyYXRlZFRyYW5zY29kaW5nRW5hYmxlZFBhc3MnXG4gICAgKTtcblxuICAgIHRoaXMucHJvY2Vzc1dvcmtmbG93QWNjZWxlcmF0ZWRUcmFuc2NvZGluZ1ByZWZlcnJlZCA9XG4gICAgICBuZXcgc3RlcGZ1bmN0aW9ucy5QYXNzKFxuICAgICAgICB0aGlzLFxuICAgICAgICAncHJvY2Vzc1dvcmtmbG93QWNjZWxlcmF0ZWRUcmFuc2NvZGluZ1ByZWZlcnJlZFBhc3MnXG4gICAgICApO1xuXG4gICAgdGhpcy5wcm9jZXNzV29ya2Zsb3dDdXN0b21Kb2JUZW1wbGF0ZSA9IG5ldyBzdGVwZnVuY3Rpb25zLlBhc3MoXG4gICAgICB0aGlzLFxuICAgICAgJ1Byb2Nlc3NXb3JrZmxvd0N1c3RvbUpvYlRlbXBsYXRlUGFzcydcbiAgICApO1xuXG4gICAgdGhpcy5wcm9jZXNzV29ya2Zsb3dGcmFtZUNhcHR1cmVPZmYgPSBuZXcgc3RlcGZ1bmN0aW9ucy5QYXNzKFxuICAgICAgdGhpcyxcbiAgICAgICdQcm9jZXNzV29ya2Zsb3dGcmFtZUNhcHR1cmVPZmZQYXNzJ1xuICAgICk7XG5cbiAgICB0aGlzLnByb2Nlc3NXb3JrZmxvd0ZyYW1lQ2FwdHVyZU9uID0gbmV3IHN0ZXBmdW5jdGlvbnMuUGFzcyhcbiAgICAgIHRoaXMsXG4gICAgICAnUHJvY2Vzc1dvcmtmbG93RnJhbWVDYXB0dXJlT25QYXNzJ1xuICAgICk7XG5cbiAgICB0aGlzLnByb2Nlc3NXb3JrZmxvd0pvYlRlbXBsYXRlMTA4MHAgPSBuZXcgc3RlcGZ1bmN0aW9ucy5QYXNzKFxuICAgICAgdGhpcyxcbiAgICAgICdQcm9jZXNzV29ya2Zsb3dKb2JUZW1wbGF0ZTEwODBwUGFzcydcbiAgICApO1xuXG4gICAgdGhpcy5wcm9jZXNzV29ya2Zsb3dKb2JUZW1wbGF0ZTIxNjBwID0gbmV3IHN0ZXBmdW5jdGlvbnMuUGFzcyhcbiAgICAgIHRoaXMsXG4gICAgICAnUHJvY2Vzc1dvcmtmbG93Sm9iVGVtcGxhdGUyMTYwcFBhc3MnXG4gICAgKTtcblxuICAgIHRoaXMucHJvY2Vzc1dvcmtmbG93Sm9iVGVtcGxhdGU3MjBwID0gbmV3IHN0ZXBmdW5jdGlvbnMuUGFzcyhcbiAgICAgIHRoaXMsXG4gICAgICAnUHJvY2Vzc1dvcmtmbG93Sm9iVGVtcGxhdGU3MjBwUGFzcydcbiAgICApO1xuXG4gICAgdGhpcy5wdWJsaXNoV29ya2Zsb3dDb21wbGV0ZSA9IG5ldyBzdGVwZnVuY3Rpb25zLlBhc3MoXG4gICAgICB0aGlzLFxuICAgICAgJ1B1Ymxpc2hXb3JrZmxvd0NvbXBsZXRlUGFzcydcbiAgICApO1xuICB9XG59Il19