"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepFunctionsTasks = void 0;
const cdk = require("@aws-cdk/core");
const tasks = require("@aws-cdk/aws-stepfunctions-tasks");
class StepFunctionsTasks extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.ingestWorkflowInputValidate = new tasks.LambdaInvoke(this, 'IngestWorkflowInputValidateTask', {
            lambdaFunction: props.lambdaFunctions.inputValidate,
            payloadResponseOnly: true,
        });
        this.ingestWorkflowMediaInfo = new tasks.LambdaInvoke(this, 'IngestWorkflowMediaInfoTask', {
            lambdaFunction: props.lambdaFunctions.mediaInfo,
            payloadResponseOnly: true,
        });
        this.ingestWorkflowDynamoDbUpdate = new tasks.LambdaInvoke(this, 'IngestWorkflowDynamoDbUpdateTask', {
            lambdaFunction: props.lambdaFunctions.dynamoDbUpdate,
            payloadResponseOnly: true,
        });
        this.ingestWorkflowSnsNotifications = new tasks.LambdaInvoke(this, 'IngestWorkflowSnsNotificationsTask', {
            lambdaFunction: props.lambdaFunctions.snsNotification,
            payloadResponseOnly: true,
        });
        this.ingestWorkflowProcessExecute = new tasks.LambdaInvoke(this, 'IngestWorkflowProcessExecuteTask', {
            lambdaFunction: props.lambdaFunctions.stepFunctions,
            payloadResponseOnly: true,
        });
        this.processWorkflowDynamoDbUpdate = new tasks.LambdaInvoke(this, 'ProcessWorkflowDynamoDbUpdateTask', {
            lambdaFunction: props.lambdaFunctions.dynamoDbUpdate,
            payloadResponseOnly: true,
        });
        this.processWorkflowEncodeJobSubmit = new tasks.LambdaInvoke(this, 'ProcessWorkflowEncodeJobSubmitTask', {
            lambdaFunction: props.lambdaFunctions.encode,
            payloadResponseOnly: true,
        });
        this.processWorkflowProfiler = new tasks.LambdaInvoke(this, 'ProcessWorkflowProfilerTask', {
            lambdaFunction: props.lambdaFunctions.profiler,
            payloadResponseOnly: true,
        });
        this.publishWorkflowArchive = new tasks.LambdaInvoke(this, 'PublishWorkflowArchiveTask', {
            lambdaFunction: props.lambdaFunctions.archiveSource,
            payloadResponseOnly: true,
        });
        this.publishWorkflowDeepArchive = new tasks.LambdaInvoke(this, 'PublishWorkflowDeepArchiveTask', {
            lambdaFunction: props.lambdaFunctions.archiveSource,
            payloadResponseOnly: true,
        });
        this.publishWorkflowDynamoDbUpdate = new tasks.LambdaInvoke(this, 'PublishWorkflowDynamoDbUpdateTask', {
            lambdaFunction: props.lambdaFunctions.dynamoDbUpdate,
            payloadResponseOnly: true,
        });
        this.publishWorkflowMediaPackageAssets = new tasks.LambdaInvoke(this, 'PublishWorkflowMediaPackageAssetsTask', {
            lambdaFunction: props.lambdaFunctions.mediaPackageAssets,
            payloadResponseOnly: true,
        });
        this.publishWorkflowSnsNotification = new tasks.LambdaInvoke(this, 'PublishWorkflowSnsNotificationTask', {
            lambdaFunction: props.lambdaFunctions.snsNotification,
            payloadResponseOnly: true,
        });
        this.publishWorkflowSqsSendMessage = new tasks.LambdaInvoke(this, 'PublishWorkflowSqsSendMessageTask', {
            lambdaFunction: props.lambdaFunctions.sqsSendMessage,
            payloadResponseOnly: true,
        });
        this.publishWorkflowValidateEncodingOutput = new tasks.LambdaInvoke(this, 'PublishWorkflowValidateEncodingOutputTask', {
            lambdaFunction: props.lambdaFunctions.outputValidate,
            payloadResponseOnly: true,
        });
    }
}
exports.StepFunctionsTasks = StepFunctionsTasks;
//# sourceMappingURL=data:application/json;base64,